// Generated by CoffeeScript 1.9.3
var ajax_channel_and_title, allowed_in_time_field, api_key, append_new_video_container, append_new_video_container_if_none_left, clear_video_image, clear_video_title, do_action_button_with_save, finishedSerializing, get_link_from_montage_container, link_to_img, make_link_container, montage_id, montage_link_container, montage_link_entered, montage_links, montage_secret, my_host_url, new_endpoint, save_endpoint, serialize, serializeAndSave, set_video_image, set_video_title, text_to_time, time_to_text, unserialize, video_title_markup, watch_link, youtube_api_endpoint, youtube_channel_link, youtube_video_link;

api_key = "AIzaSyDNunorfrD4Wp21oL0F96Ov_L8mb9rdw_s";

youtube_api_endpoint = 'https://www.googleapis.com/youtube/v3/videos';

youtube_video_link = "https://www.youtube.com/watch?v=";

youtube_channel_link = "https://www.youtube.com/channel/";

my_host_url = "";

save_endpoint = my_host_url + "/save.php";

new_endpoint = my_host_url + "/new.php";

watch_link = my_host_url + "/watch.html?m=";

montage_id = null;

montage_secret = null;

allowed_in_time_field = /[^0-9:]/g;

$.fn.moveUp = function() {
  return $.each(this, function() {
    return $(this).after($(this).prev());
  });
};

$.fn.moveDown = function() {
  return $.each(this, function() {
    return $(this).before($(this).next());
  });
};

ajax_channel_and_title = function(id, func) {
  return $.ajax({
    url: youtube_api_endpoint,
    data: {
      part: 'snippet',
      id: id,
      key: api_key
    },
    localCache: true,
    cacheTTL: 5,
    dataType: 'json',
    cacheKey: id
  }).done(function(response) {
    return func(response);
  });
};

link_to_img = function(id) {
  return "https://i.ytimg.com/vi/" + id + "/mqdefault.jpg";
};

set_video_image = function(target, url) {
  var img;
  target.css("background-image", "url('img/testCard.gif')");
  img = new Image;
  img.onload = function() {
    return target.css("background-image", "url('" + url + "')");
  };
  return img.src = url;
};

clear_video_image = function(target) {
  return target.css("background-image", "");
};

video_title_markup = function(channel_id, channel_title, title, id) {
  return ("<a href='" + youtube_channel_link + channel_id + "'>" + channel_title + "</a>") + ("<span>/</span><a href='" + youtube_video_link + id + "'>" + title + "</a>");
};

set_video_title = function(target, id) {
  return ajax_channel_and_title(id, function(response) {
    var channel_id, channel_title, title;
    title = response.items[0].snippet.title;
    channel_id = response.items[0].snippet.channelId;
    channel_title = response.items[0].snippet.channelTitle;
    return target.html(video_title_markup(channel_id, channel_title, title, id));
  });
};

clear_video_title = function(target) {
  return target.html("&nbsp;");
};

text_to_time = function(value) {
  var output, parts;
  value = value.replace(allowed_in_time_field, "");
  output = 0;
  parts = value.split(":");
  if (parts.length > 0 && parseInt(parts[parts.length - 1])) {
    output += parseInt(parts.pop());
  }
  if (parts.length > 0 && parseInt(parts[parts.length - 1])) {
    output += parseInt(parts.pop()) * 60;
  }
  if (parts.length > 0 && parseInt(parts[parts.length - 1])) {
    output += parseInt(parts.pop()) * 60 * 60;
  }
  return output;
};

time_to_text = function(value) {
  var hours, minutes, seconds;
  if (!parseInt(value)) {
    return 0;
  }
  value = parseInt(value);
  hours = Math.floor(value / (60 * 60));
  minutes = Math.floor((value - (hours * 60 * 60)) / 60);
  seconds = value - (hours * 60 * 60) - (minutes * 60);
  if (hours && minutes < 10) {
    minutes = "0" + minutes;
  }
  if (minutes && seconds < 10) {
    seconds = "0" + seconds;
  }
  if (hours) {
    return [hours, minutes, seconds].join(":");
  } else if (minutes) {
    return [minutes, seconds].join(":");
  } else {
    return seconds;
  }
};

make_link_container = "<div class=\"row-container\">\n    <div class=\"row-box thumb\">\n\n    </div>\n    <div class=\"row-box info-box-space\">\n        <div class=\"montage-form-group\">\n            <h2 class=\"montageTitle\">&nbsp;</h2>\n\n            <div class=\"form-group\">\n                <label for=\"montageUrl1\"></label>\n                <input type=\"text\" id=\"montageUrl1\" class=\"form-control montageUrl\"\n                       placeholder=\"Paste the Youtube link here\"/>\n            </div>\n            <span class=\"form-inline\">\n                <input type=\"text\" class=\"form-control montageStart\" placeholder=\"0:00\" maxlength=\"6\"/>\n            </span>\n            <span class=\"form-inline\">\n                <input type=\"text\" class=\"form-control montageEnd\" placeholder=\"0:00\" maxlength=\"6\"/>\n            </span>\n            <span class=\"btn-group\" role=\"group\" aria-label=\"...\">\n                <a href=\"#\" class=\"montage-delete btn btn-default\"><i class=\"fa fa-times\"></i></a>\n                <a href=\"#\" class=\"montage-up btn btn-default\"><i class=\"fa fa-chevron-up\"></i></a>\n                <a href=\"#\" class=\"montage-down btn btn-default\"><i class=\"fa fa-chevron-down\"></i></a>\n            </span>\n            <a href=\"#\" class=\"montage-add-here\"><i class=\"fa fa-plus\"></i></a>\n        </div>\n    </div>\n</div>";

montage_link_container = void 0;

get_link_from_montage_container = function(container) {
  return container.find(".montageUrl");
};

do_action_button_with_save = function(container, selector, action) {
  return container.find(selector).click(function(e) {
    e.preventDefault();
    action();
    return serializeAndSave();
  });
};

append_new_video_container = function(target) {
  var new_container, url_target;
  new_container = $(make_link_container);
  new_container.hide();
  if (target != null) {
    target.before(new_container);
  } else {
    montage_link_container.append(new_container);
  }
  new_container.slideDown(100);
  url_target = get_link_from_montage_container(new_container);
  url_target.change(montage_link_entered);
  url_target.keyup(montage_link_entered);
  new_container.find(".montageStart").change(function() {
    return serializeAndSave();
  });
  new_container.find(".montageEnd").change(function() {
    return serializeAndSave();
  });
  new_container.find(".montage-add-here").click(function(e) {
    e.preventDefault();
    return append_new_video_container(new_container);
  });
  do_action_button_with_save(new_container, ".montage-delete", function() {
    return new_container.slideUp(100, function() {
      return new_container.remove();
    });
  });
  do_action_button_with_save(new_container, ".montage-up", function() {
    if (new_container.index() !== 1) {
      return new_container.moveUp();
    }
  });
  do_action_button_with_save(new_container, ".montage-down", function() {
    return new_container.moveDown();
  });
  $(url_target).on("paste", function(e) {
    return setTimeout(function() {
      return $(e.target).trigger('change');
    }, 1);
  });
  return url_target;
};

append_new_video_container_if_none_left = function() {
  if (montage_link_container) {
    if (get_link_from_montage_container(montage_link_container.children().last()).val().trim().length) {
      return append_new_video_container();
    }
  }
};

montage_links = {};

montage_link_entered = function(e) {
  var id, image_target, link_index, link_target, title_target;
  link_index = $(e.target.parentNode.parentNode.parentNode.parentNode).index();
  image_target = $(e.target.parentNode.parentNode.parentNode.parentNode).children(".thumb").first();
  title_target = $(e.target.parentNode.parentNode).children(".montageTitle").first();
  link_target = e.target.value;
  if (montage_links[link_index] === link_target) {
    return;
  } else {
    montage_links[link_index] = link_target;
  }
  if (link_target.split("=").length > 1) {
    id = link_target.split("=")[1].split("&")[0];
    if (id.length === 11) {
      serializeAndSave();
      $(e.target.parentNode).addClass("has-success");
      set_video_image(image_target, link_to_img(id));
      set_video_title(title_target, id);
      append_new_video_container_if_none_left();
      return;
    }
  }
  $(e.target.parentNode).removeClass("has-success");
  serializeAndSave();
  clear_video_image(image_target);
  return clear_video_title(title_target);
};

unserialize = function(data) {
  var j, link, number_of_videos, ref, start, stop, video_index;
  data = data.split(":");
  data = data.slice(1);
  number_of_videos = data.length / 3;
  for (video_index = j = 0, ref = number_of_videos - 1; 0 <= ref ? j <= ref : j >= ref; video_index = 0 <= ref ? ++j : --j) {
    link = append_new_video_container();
    start = link.parent().parent().find(".montageStart");
    stop = link.parent().parent().find(".montageEnd");
    link.attr("value", youtube_video_link + data[video_index * 3]);
    if (data[video_index * 3 + 1] !== "0") {
      start.attr("value", time_to_text(data[video_index * 3 + 1]));
    }
    if (data[video_index * 3 + 2] !== "0") {
      stop.attr("value", time_to_text(data[video_index * 3 + 2]));
    }
  }
  return montage_link_container.children().each(function(i, container) {
    return get_link_from_montage_container($(container)).trigger('change');
  });
};

serialize = function() {
  var data, montage_name;
  data = [];
  montage_name = $("#montageName").val();
  data.push(montage_name);
  montage_link_container.children().each(function(i, container) {
    var end_time, link, link_data, start, start_time, stop;
    link = get_link_from_montage_container($(container));
    if ((link != null) && link.length && link.val().trim().split("=").length > 1) {
      start = link.parent().parent().find(".montageStart");
      stop = link.parent().parent().find(".montageEnd");
      link_data = link.val().trim().split("=")[1];
      data.push(link_data);
      start_time = 0;
      if (start.val() !== "") {
        start_time = text_to_time(start.val());
        if (start_time > 0) {
          start.parent().addClass("has-success");
        }
        data.push(start_time);
      } else {
        start.parent().removeClass("has-success");
        data.push(0);
      }
      if (stop.val() !== "") {
        end_time = text_to_time(stop.val());
        if (end_time > 0) {
          if (end_time > start_time) {
            stop.parent().removeClass("has-error");
            stop.parent().addClass("has-success");
          } else {
            end_time = 0;
            stop.parent().addClass("has-error");
          }
        } else {
          stop.parent().removeClass("has-error");
          stop.parent().removeClass("has-success");
        }
        return data.push(end_time);
      } else {
        stop.parent().removeClass("has-error");
        stop.parent().removeClass("has-success");
        return data.push(0);
      }
    }
  });
  return data.join(":");
};

finishedSerializing = function() {
  return $("#montage-link").html("<a href='" + watch_link + montage_id + "'>https://radmontage.herokuapp.com" + watch_link + montage_id + "</a>");
};

serializeAndSave = function() {
  var data;
  data = serialize();
  if (data.length) {
    $("#montage-link").html("Saving...");
    if ((montage_id == null) || (montage_secret == null)) {
      $.get(new_endpoint, {}, function(result) {
        montage_id = result.id;
        montage_secret = result.secret;
        return serializeAndSave();
      }, 'json');
    }
    if (window.localStorage) {
      window.localStorage.setItem("data", data);
      window.localStorage.setItem("id", montage_id);
      window.localStorage.setItem("secret", montage_secret);
    }
    if (montage_secret) {
      return $.post(save_endpoint, {
        id: montage_id,
        secret: montage_secret,
        data: data
      }, finishedSerializing, 'json');
    }
  }
};

$(function() {
  montage_link_container = $("#montage-links-container");
  if (window.localStorage && window.localStorage.getItem("data")) {
    montage_id = window.localStorage.getItem("id");
    montage_secret = window.localStorage.getItem("secret");
    unserialize(window.localStorage.getItem("data"));
  } else {
    append_new_video_container();
  }
  return $("#montageName").change(function() {
    return serializeAndSave();
  });
});
